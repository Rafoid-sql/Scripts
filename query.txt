WITH K_BLOCK_FACT_QRY AS ( SELECT LOCATION_DIM.STATE,
             NPA_NXX_KB_DIM.NPA, LOCATION_DIM.RATE_CENTER_NAME,
             LOCATION_DIM.WIRE_CENTER_ID, NPA_NXX_KB_DIM.NXX,
             LOCATION_DIM.WIRE_CENTER_NAME, NPA_NXX_KB_DIM.K_BLOCK,
             CONDITION_DIM.INC_AVAILABLE, TYPE_DIM.TN_USAGE_TYPE,
             (SUM(TO_NUMBER(K_BLOCK_FACT.LINE_COUNT))) AS SUM_LINE_COUNT,
             LOCATION_DIM.RC_STATE, CONDITION_DIM.INC_CATEGORY,
             NPA_NXX_KB_DIM.CH_OCN, NPA_NXX_KB_DIM.BH_OCN,
             (MAX(TO_NUMBER(TIME_DIM.TIME_KEY))), NPA_NXX_KB_DIM.INT_OCN,
             LOCATION_DIM.NGP FROM LOCATION_DIM, NPA_NXX_KB_DIM,
             CONDITION_DIM, TYPE_DIM, K_BLOCK_FACT, TIME_DIM WHERE
             (((TIME_DIM.YEAR_MONTH = :B13 AND K_BLOCK_FACT.DAY = '99' ) OR (
             TIME_DIM.YEAR_MONTH = :B12 AND K_BLOCK_FACT.DAY <= :B11 ) ) AND
             LOCATION_DIM.STATE LIKE :B10 AND LOCATION_DIM.RC_STATE LIKE :B9
             AND NPA_NXX_KB_DIM.NPA LIKE :B8 AND
             LOCATION_DIM.RATE_CENTER_NAME LIKE :B7 AND
             LOCATION_DIM.WIRE_CENTER_ID LIKE :B6 AND NPA_NXX_KB_DIM.NXX LIKE
             :B5 AND NPA_NXX_KB_DIM.BH_OCN LIKE :B4 AND LOCATION_DIM.NGP LIKE
             :B3 AND NPA_NXX_KB_DIM.INT_OCN = 'NA' AND ( 'N' = :B2 OR
             INSTR(:B1 , CONCAT(':', CONCAT(CONCAT(LOCATION_DIM.STATE,
             LOCATION_DIM.WIRE_CENTER_ID), ':')) ) <> 0 ) ) AND
             NPA_NXX_KB_DIM.NPA_NXX_KB_KEY = K_BLOCK_FACT.NPA_NXX_KB_KEY AND
             CONDITION_DIM.CONDITION_KEY = K_BLOCK_FACT.CONDITION_KEY AND
             TIME_DIM.TIME_KEY = K_BLOCK_FACT.TIME_KEY AND TYPE_DIM.TYPE_KEY
             = K_BLOCK_FACT.TYPE_KEY AND LOCATION_DIM.LOCATION_KEY =
             K_BLOCK_FACT.LOCATION_KEY GROUP BY LOCATION_DIM.STATE,
             NPA_NXX_KB_DIM.NPA, LOCATION_DIM.RATE_CENTER_NAME,
             LOCATION_DIM.WIRE_CENTER_ID, NPA_NXX_KB_DIM.NXX,
             LOCATION_DIM.WIRE_CENTER_NAME, NPA_NXX_KB_DIM.K_BLOCK,
             CONDITION_DIM.INC_AVAILABLE, TYPE_DIM.TN_USAGE_TYPE,
             LOCATION_DIM.RC_STATE, CONDITION_DIM.INC_CATEGORY,
             NPA_NXX_KB_DIM.CH_OCN, NPA_NXX_KB_DIM.BH_OCN,
             NPA_NXX_KB_DIM.INT_OCN, LOCATION_DIM.NGP ORDER BY 2 ASC, 5 ASC,
             7 ASC, 3 ASC, 11 ASC ), EC AS ( SELECT STATE, NPA,
             RATE_CENTER_NAME, WIRE_CENTER_ID, NXX, WIRE_CENTER_NAME,
             K_BLOCK, TO_NUMBER(SUM_LINE_COUNT, '999999999') AS INST, CASE
             WHEN INC_AVAILABLE = 'UNAVAILABLE' THEN SUM_LINE_COUNT ELSE 0
             END AS UNAV, CASE WHEN INC_CATEGORY = 'ASGN' THEN SUM_LINE_COUNT
             ELSE 0 END AS ASGN, CASE WHEN INC_CATEGORY = 'ADMN' THEN
             SUM_LINE_COUNT ELSE 0 END AS ADMN, CASE WHEN INC_CATEGORY =
             'RSVD' THEN SUM_LINE_COUNT ELSE 0 END AS RSVD, CASE WHEN
             INC_CATEGORY = 'AGNG' THEN SUM_LINE_COUNT ELSE 0 END AS AGNG,
             CASE WHEN INC_CATEGORY = 'INTM' THEN SUM_LINE_COUNT ELSE 0 END
             AS INTM, CASE WHEN TN_USAGE_TYPE = 'PO' THEN SUM_LINE_COUNT ELSE
             0 END AS PO, CASE WHEN TN_USAGE_TYPE = 'OFFC' THEN
             SUM_LINE_COUNT ELSE 0 END AS OFFC, CASE WHEN TN_USAGE_TYPE =
             'LRN' THEN SUM_LINE_COUNT ELSE 0 END AS LRN, CASE WHEN
             TN_USAGE_TYPE = 'E911' THEN SUM_LINE_COUNT ELSE 0 END AS E911,
             CASE WHEN TN_USAGE_TYPE = 'SDT' THEN SUM_LINE_COUNT ELSE 0 END
             AS SDT, CASE WHEN TN_USAGE_TYPE = 'DNPL' THEN SUM_LINE_COUNT
             ELSE 0 END AS DNPL, CASE WHEN TN_USAGE_TYPE = 'TEST' THEN
             SUM_LINE_COUNT ELSE 0 END AS TEST, CASE WHEN TN_USAGE_TYPE =
             'TLDN' THEN SUM_LINE_COUNT ELSE 0 END AS TLDN, RC_STATE, CH_OCN,
             BH_OCN, NGP FROM K_BLOCK_FACT_QRY WHERE SUM_LINE_COUNT <> '0' ),
             ADD_NONDONATED_COLUMN AS ( SELECT NPA, NXX, K_BLOCK,
             RATE_CENTER_NAME, RC_STATE, CH_OCN, BH_OCN, NGP, SUM(INST) AS
             SUM_OF_INST, SUM(UNAV) AS SUM_OF_UNAV, SUM(ASGN) AS SUM_OF_ASGN,
             SUM(INTM) AS SUM_OF_INTM, SUM(RSVD) AS SUM_OF_RSVD, SUM(AGNG) AS
             SUM_OF_AGNG, SUM(ADMN) AS SUM_OF_ADMN, SUM(LRN) AS SUM_OF_LRN,
             SUM(PO) AS SUM_OF_PO, SUM(OFFC) AS SUM_OF_OFFC, SUM(TEST) AS
             SUM_OF_TEST, SUM(TLDN) AS SUM_OF_TLDN, SUM(E911) AS SUM_OF_E911,
             SUM(SDT) AS SUM_OF_SDT, SUM(DNPL) AS SUM_OF_DNPL, 1 AS
             NONDONATED FROM EC GROUP BY NPA, NXX, K_BLOCK, RATE_CENTER_NAME,
             RC_STATE, CH_OCN, BH_OCN, NGP ), DONATED_K_BLOCK_FACT_QRY AS (
             SELECT NPA_NXX_KB_DIM.NPA, NPA_NXX_KB_DIM.NXX,
             NPA_NXX_KB_DIM.K_BLOCK, LOCATION_DIM.RC_STATE,
             DONATED_K_BLOCK_FACT.TIME_KEY, DONATED_K_BLOCK_FACT.LOCATION_KEY,
              DONATED_K_BLOCK_FACT.NPA_NXX_KB_KEY,
             LOCATION_DIM.RATE_CENTER_NAME, NPA_NXX_KB_DIM.CH_OCN,
             NPA_NXX_KB_DIM.BH_OCN, (SUM(DONATED_K_BLOCK_FACT.LINE_COUNT)) AS
             SUM_LINE_COUNT, (MAX(TIME_DIM.TIME_KEY)) FROM NPA_NXX_KB_DIM,
             LOCATION_DIM, DONATED_K_BLOCK_FACT, TIME_DIM WHERE
             (((TIME_DIM.YEAR_MONTH = :B13 AND DONATED_K_BLOCK_FACT.DAY =
             '99' ) OR ( TIME_DIM.YEAR_MONTH = :B12 AND
             DONATED_K_BLOCK_FACT.DAY <= :B11 ) ) AND LOCATION_DIM.STATE LIKE
             :B10 AND LOCATION_DIM.RC_STATE LIKE :B9 AND NPA_NXX_KB_DIM.NPA
             LIKE :B8 AND LOCATION_DIM.RATE_CENTER_NAME LIKE :B7 AND
             LOCATION_DIM.WIRE_CENTER_ID LIKE :B6 AND NPA_NXX_KB_DIM.NXX LIKE
             :B5 AND NPA_NXX_KB_DIM.CH_OCN LIKE :B4 AND LOCATION_DIM.NGP LIKE
             :B3 AND ( 'N' = :B2 OR INSTR(:B1 , CONCAT(':',
             CONCAT(CONCAT(LOCATION_DIM.STATE, LOCATION_DIM.WIRE_CENTER_ID),
             ':')) ) <> 0 ) ) AND NPA_NXX_KB_DIM.NPA_NXX_KB_KEY =
             DONATED_K_BLOCK_FACT.NPA_NXX_KB_KEY AND
             LOCATION_DIM.LOCATION_KEY = DONATED_K_BLOCK_FACT.LOCATION_KEY
             AND TIME_DIM.TIME_KEY = DONATED_K_BLOCK_FACT.TIME_KEY GROUP BY
             NPA_NXX_KB_DIM.NPA, NPA_NXX_KB_DIM.NXX, NPA_NXX_KB_DIM.K_BLOCK,
             LOCATION_DIM.RC_STATE, DONATED_K_BLOCK_FACT.TIME_KEY,
             DONATED_K_BLOCK_FACT.LOCATION_KEY,
             DONATED_K_BLOCK_FACT.NPA_NXX_KB_KEY,
             LOCATION_DIM.RATE_CENTER_NAME, NPA_NXX_KB_DIM.CH_OCN,
             NPA_NXX_KB_DIM.BH_OCN ORDER BY 1 ASC, 2 ASC, 3 ASC, 8 ASC, 4 ASC
             ), ADD_COLUMNS AS ( SELECT RC_STATE, NPA, NXX, K_BLOCK,
             RATE_CENTER_NAME, 'X' AS DONATED FROM DONATED_K_BLOCK_FACT_QRY
             WHERE SUM_LINE_COUNT <> '0' ), JOIN_ AS ( SELECT JOIN__TMP.NPA,
             JOIN__TMP.NXX, JOIN__TMP.K_BLOCK, JOIN__TMP.RATE_CENTER_NAME,
             JOIN__TMP.RC_STATE, ADD_NONDONATED_COLUMN.CH_OCN,
             ADD_NONDONATED_COLUMN.BH_OCN, ADD_NONDONATED_COLUMN.NGP,
             ADD_NONDONATED_COLUMN.SUM_OF_INST,
             ADD_NONDONATED_COLUMN.SUM_OF_UNAV,
             ADD_NONDONATED_COLUMN.SUM_OF_ASGN,
             ADD_NONDONATED_COLUMN.SUM_OF_INTM,
             ADD_NONDONATED_COLUMN.SUM_OF_RSVD,
             ADD_NONDONATED_COLUMN.SUM_OF_AGNG,
             ADD_NONDONATED_COLUMN.SUM_OF_ADMN,
             ADD_NONDONATED_COLUMN.SUM_OF_LRN,
             ADD_NONDONATED_COLUMN.SUM_OF_PO,
             ADD_NONDONATED_COLUMN.SUM_OF_OFFC,
             ADD_NONDONATED_COLUMN.SUM_OF_TEST,
             ADD_NONDONATED_COLUMN.SUM_OF_TLDN,
             ADD_NONDONATED_COLUMN.SUM_OF_E911,
             ADD_NONDONATED_COLUMN.SUM_OF_SDT,
             ADD_NONDONATED_COLUMN.SUM_OF_DNPL,
             ADD_NONDONATED_COLUMN.NONDONATED, ADD_COLUMNS.DONATED AS DON
             FROM ( SELECT NPA, NXX, K_BLOCK, RATE_CENTER_NAME, RC_STATE FROM
             ADD_NONDONATED_COLUMN UNION SELECT NPA, NXX, K_BLOCK,
             RATE_CENTER_NAME, RC_STATE FROM ADD_COLUMNS ) JOIN__TMP LEFT
             JOIN ADD_NONDONATED_COLUMN ON JOIN__TMP.NPA =
             ADD_NONDONATED_COLUMN.NPA AND JOIN__TMP.NXX =
             ADD_NONDONATED_COLUMN.NXX AND JOIN__TMP.K_BLOCK =
             ADD_NONDONATED_COLUMN.K_BLOCK AND JOIN__TMP.RATE_CENTER_NAME =
             ADD_NONDONATED_COLUMN.RATE_CENTER_NAME AND JOIN__TMP.RC_STATE =
             ADD_NONDONATED_COLUMN.RC_STATE LEFT JOIN ADD_COLUMNS ON
             JOIN__TMP.NPA = ADD_COLUMNS.NPA AND JOIN__TMP.NXX =
             ADD_COLUMNS.NXX AND JOIN__TMP.K_BLOCK = ADD_COLUMNS.K_BLOCK AND
             JOIN__TMP.RATE_CENTER_NAME = ADD_COLUMNS.RATE_CENTER_NAME AND
             JOIN__TMP.RC_STATE = ADD_COLUMNS.RC_STATE ),
             EXPRESSION_CALCULATOR_6 AS ( SELECT JOIN_.*, CASE WHEN
             NONDONATED = 1 THEN '' ELSE DON END AS DONATED FROM JOIN_ ),
             EC_2 AS ( SELECT EXPRESSION_CALCULATOR_6.*, CASE WHEN DONATED =
             'X' THEN 1000 ELSE (1000 - (SUM_OF_ASGN + SUM_OF_INTM +
             SUM_OF_RSVD + SUM_OF_AGNG + SUM_OF_ADMN)) END AS AVAL, NPA ||
             '-' || NXX AS "NPA-NXX", CASE WHEN SUM_OF_ASGN IS NULL THEN 0
             ELSE SUM_OF_ASGN END AS ASGN, CASE WHEN SUM_OF_INTM IS NULL THEN
             0 ELSE SUM_OF_INTM END AS INTM, CASE WHEN SUM_OF_RSVD IS NULL
             THEN 0 ELSE SUM_OF_RSVD END AS RSVD, CASE WHEN SUM_OF_AGNG IS
             NULL THEN 0 ELSE SUM_OF_AGNG END AS AGNG, CASE WHEN SUM_OF_ADMN
             IS NULL THEN 0 ELSE SUM_OF_ADMN END AS ADMN, 100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0) AS DBL,
             FLOOR(100 * SUM_OF_ASGN / NULLIF(1000 - SUM_OF_INTM, 0)) AS
             FLOOR_DBL, TO_CHAR(FLOOR(100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0))) AS STR_FLOOR_DBL, ROUND(((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0)) -
             (FLOOR((100 * TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 -
             SUM_OF_INTM, 0))))) * 100) AS FRACT_DBL, CASE WHEN
             LENGTH(TO_CHAR(ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100))) = 1 THEN (ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100)) || '0' ELSE TO_CHAR(ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100)) END AS STR_FRACT_DBL, (TO_CHAR(FLOOR(100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0)))) || '.'
             || CASE WHEN LENGTH(TO_CHAR(ROUND(((100 * TO_NUMBER(SUM_OF_ASGN)
             / NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100))) = 1 THEN (ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100)) || '0' ELSE TO_CHAR(ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100)) END || '%' AS STR_UTIL, CASE WHEN DONATED = 'X' THEN
             'Donated' ELSE CASE WHEN SUM_OF_INTM = 1000 THEN 'Intermed' ELSE
             (TO_CHAR(FLOOR(100 * TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 -
             SUM_OF_INTM, 0)))) || '.' || CASE WHEN
             LENGTH(TO_CHAR(ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100))) = 1 THEN (ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100)) || '0' ELSE TO_CHAR(ROUND(((100 * TO_NUMBER(SUM_OF_ASGN) /
             NULLIF(1000 - SUM_OF_INTM, 0)) - (FLOOR((100 *
             TO_NUMBER(SUM_OF_ASGN) / NULLIF(1000 - SUM_OF_INTM, 0))))) *
             100)) END || '%' END END AS UTIL FROM EXPRESSION_CALCULATOR_6 ),
             EXPRESSION_CALCULATOR_5 AS ( SELECT RC_STATE AS RC_ST, NPA AS
             NPA, RATE_CENTER_NAME AS RC, NXX AS NXX, K_BLOCK AS X,
             SUM_OF_INST AS INST, SUM_OF_UNAV AS UNAV, SUM_OF_RSVD AS RSVD,
             SUM_OF_AGNG AS AGNG, SUM_OF_LRN AS LRN, SUM_OF_SDT AS SDT,
             SUM_OF_TEST AS TEST, DONATED AS DONATED, AVAL AS AVAL, "NPA-NXX"
             AS "NPA-NXX", SUM_OF_ASGN AS ASGN, SUM_OF_INTM AS INTM,
             SUM_OF_ADMN AS ADMN, SUM_OF_PO AS PO, SUM_OF_OFFC AS OFFC,
             SUM_OF_TLDN AS TLDN, SUM_OF_E911 AS E911, SUM_OF_DNPL AS DNPL,
             DBL AS DBL, FLOOR_DBL AS FLOOR_DBL, STR_FLOOR_DBL AS
             STR_FLOOR_DBL, FRACT_DBL AS FRACT_DBL, STR_FRACT_DBL AS
             STR_FRACT_DBL, STR_UTIL AS STR_UTIL, UTIL AS UTIL, CH_OCN AS
             CH_OCN, BH_OCN AS BH_OCN, NGP AS NGP, RATE_CENTER_NAME || '|' ||
             RC_STATE AS MERGEDRC FROM EC_2 ), PIVOT_EXCLUDING_RC AS ( SELECT
             SUM(ADMN ) AS SUM_OF_ADMN, SUM(AGNG ) AS SUM_OF_AGNG, SUM(ASGN )
             AS SUM_OF_ASGN, SUM(DNPL ) AS SUM_OF_DNPL, SUM(E911 ) AS
             SUM_OF_E911, SUM(INST ) AS SUM_OF_INST, SUM(INTM ) AS
             SUM_OF_INTM, SUM(LRN ) AS SUM_OF_LRN , SUM(OFFC ) AS
             SUM_OF_OFFC, SUM(PO ) AS SUM_OF_PO , SUM(RSVD ) AS SUM_OF_RSVD,
             SUM(SDT ) AS SUM_OF_SDT , SUM(UNAV ) AS SUM_OF_UNAV, SUM(TLDN )
             AS SUM_OF_TLDN, SUM(TEST ) AS SUM_OF_TEST, MAX(DONATED ) AS
             MAXIMUM_OF_DONATED, MAX(MERGEDRC) AS MAXIMUM_OF_MERGEDRC, NPA,
             NXX, X FROM EXPRESSION_CALCULATOR_5 GROUP BY NPA, NXX, X ),
             EC_2_2 AS ( SELECT NPA, NXX, SUM_OF_INST, SUM_OF_UNAV,
             SUM_OF_RSVD, SUM_OF_AGNG, SUM_OF_LRN , SUM_OF_SDT , SUM_OF_TEST,
             SUM_OF_ASGN, SUM_OF_INTM, SUM_OF_ADMN, SUM_OF_PO , SUM_OF_OFFC,
             SUM_OF_TLDN, SUM_OF_E911, SUM_OF_DNPL, X, MAXIMUM_OF_DONATED AS
             DONATED, CASE WHEN MAXIMUM_OF_DONATED = 'X' THEN 1000 ELSE 1000
             - (SUM_OF_ASGN + SUM_OF_INTM + SUM_OF_RSVD + SUM_OF_AGNG +
             SUM_OF_ADMN) END AS AVAL, NPA || '-' || NXX AS "NPA-NXX", 100.0
             * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0)) AS DBL,
             FLOOR(100.0 * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))) AS
             FLOOR_DBL, TO_CHAR(FLOOR(100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0)))) AS STR_FLOOR_DBL, ROUND(((100.0 * SUM_OF_ASGN
             / (NULLIF(1000 - SUM_OF_INTM, 0))) - FLOOR((100.0 * SUM_OF_ASGN
             / (NULLIF(1000 - SUM_OF_INTM, 0))))) * 100.0) AS FRACT_DBL, CASE
             WHEN LENGTH(TO_CHAR(ROUND(((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))) - FLOOR((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))))) * 100.0))) = 1 THEN TO_CHAR(ROUND(((100.0 *
             SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))) - FLOOR((100.0 *
             SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))))) * 100.0)) ||
             '0' ELSE TO_CHAR(ROUND(((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))) - FLOOR((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))))) * 100.0)) END AS STR_FRACT_DBL,
             TO_CHAR(FLOOR(100.0 * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM,
             0)))) || '.' || CASE WHEN LENGTH(TO_CHAR(ROUND(((100.0 *
             SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))) - FLOOR((100.0 *
             SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))))) * 100.0))) = 1
             THEN TO_CHAR(ROUND(((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))) - FLOOR((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))))) * 100.0)) || '0' ELSE TO_CHAR(ROUND(((100.0
             * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))) - FLOOR((100.0
             * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))))) * 100.0)) END
             || '%' AS STR_UTIL, CASE WHEN MAXIMUM_OF_DONATED = 'X' THEN
             'Donated' ELSE CASE WHEN SUM_OF_INTM = 1000 THEN 'Intermed' ELSE
             TO_CHAR(FLOOR(100.0 * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM,
             0)))) || '.' || CASE WHEN LENGTH(TO_CHAR(ROUND(((100.0 *
             SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))) - FLOOR((100.0 *
             SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))))) * 100.0))) = 1
             THEN TO_CHAR(ROUND(((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))) - FLOOR((100.0 * SUM_OF_ASGN / (NULLIF(1000 -
             SUM_OF_INTM, 0))))) * 100.0)) || '0' ELSE TO_CHAR(ROUND(((100.0
             * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))) - FLOOR((100.0
             * SUM_OF_ASGN / (NULLIF(1000 - SUM_OF_INTM, 0))))) * 100.0)) END
             || '%' END END AS UTIL, SUBSTR(MAXIMUM_OF_MERGEDRC, 1,
             INSTR(MAXIMUM_OF_MERGEDRC, '|') - 1) AS RC,
             SUBSTR(MAXIMUM_OF_MERGEDRC, 0 - (LENGTH(MAXIMUM_OF_MERGEDRC) -
             INSTR(MAXIMUM_OF_MERGEDRC, '|')), LENGTH(MAXIMUM_OF_MERGEDRC) -
             INSTR(MAXIMUM_OF_MERGEDRC, '|') ) AS RC_ST, CASE WHEN
             SUM_OF_ASGN IS NULL THEN 0 ELSE SUM_OF_ASGN END AS ASGN, CASE
             WHEN SUM_OF_INTM IS NULL THEN 0 ELSE SUM_OF_INTM END AS INTM,
             CASE WHEN SUM_OF_RSVD IS NULL THEN 0 ELSE SUM_OF_RSVD END AS
             RSVD, CASE WHEN SUM_OF_AGNG IS NULL THEN 0 ELSE SUM_OF_AGNG END
             AS AGNG, CASE WHEN SUM_OF_ADMN IS NULL THEN 0 ELSE SUM_OF_ADMN
             END AS ADMN FROM PIVOT_EXCLUDING_RC ), RENAME_COLUMNS_5 AS (
             SELECT NPA, NXX, SUM_OF_INST AS INST, SUM_OF_UNAV AS UNAV,
             SUM_OF_RSVD AS RSVD, SUM_OF_AGNG AS AGNG, SUM_OF_LRN AS LRN ,
             SUM_OF_SDT AS SDT , SUM_OF_TEST AS TEST, AVAL, "NPA-NXX",
             SUM_OF_ASGN AS ASGN, SUM_OF_INTM AS INTM, SUM_OF_ADMN AS ADMN,
             SUM_OF_PO AS PO , SUM_OF_OFFC AS OFFC, SUM_OF_TLDN AS TLDN,
             SUM_OF_E911 AS E911, SUM_OF_DNPL AS DNPL, DBL, FLOOR_DBL,
             STR_FLOOR_DBL, FRACT_DBL, STR_FRACT_DBL, STR_UTIL, UTIL, X,
             DONATED, RC, RC_ST FROM EC_2_2 ), ADD_COLUMNS_4 AS ( SELECT
             COUNT (*) AS REC_COUNT, 1 AS JOINCOL FROM TYPE_1_PROCESSING
             WHERE RC_STATE = '*' ), ADD_COLUMNS_3 AS ( SELECT
             NVL(COMPANY_NAME, 'N') AS DEFAULT_IN_COMPANY_NAME,
             NVL(CONTACT_NAME, 'N') AS DEFAULT_IN_CONTACT_NAME, NVL(E_MAIL ,
             'N') AS DEFAULT_IN_E_MAIL, NVL(FAX_NUMBER , 'N') AS
             DEFAULT_IN_FAX_NUMBER, NVL(OCN , 'N') AS DEFAULT_IN_OCN,
             NVL(PHONE_NUMBER, 'N') AS DEFAULT_IN_PHONE_NUMBER, 1 AS JOINCOL
             FROM TYPE_1_PROCESSING WHERE RC_STATE = '*' ), JOIN_5 AS (
             SELECT REC_COUNT, ADD_COLUMNS_4.JOINCOL,
             DEFAULT_IN_COMPANY_NAME, DEFAULT_IN_CONTACT_NAME,
             DEFAULT_IN_E_MAIL, DEFAULT_IN_FAX_NUMBER, DEFAULT_IN_OCN,
             DEFAULT_IN_PHONE_NUMBER FROM ADD_COLUMNS_4 LEFT JOIN
             ADD_COLUMNS_3 ON ADD_COLUMNS_4.JOINCOL = ADD_COLUMNS_3.JOINCOL
             ), EXPRESSION_CALCULATOR_2 AS ( SELECT JOINCOL, CASE WHEN
             REC_COUNT = 0 THEN NULL ELSE DEFAULT_IN_COMPANY_NAME END AS
             DEFAULT_COMPANY_NAME, CASE WHEN REC_COUNT = 0 THEN NULL ELSE
             DEFAULT_IN_CONTACT_NAME END AS DEFAULT_CONTACT_NAME, CASE WHEN
             REC_COUNT = 0 THEN NULL ELSE DEFAULT_IN_E_MAIL END AS
             DEFAULT_E_MAIL, CASE WHEN REC_COUNT = 0 THEN NULL ELSE
             DEFAULT_IN_FAX_NUMBER END AS DEFAULT_FAX_NUMBER, CASE WHEN
             REC_COUNT = 0 THEN NULL ELSE DEFAULT_IN_OCN END AS DEFAULT_OCN,
             CASE WHEN REC_COUNT = 0 THEN NULL ELSE DEFAULT_IN_PHONE_NUMBER
             END AS DEFAULT_PHONE_NUMBER FROM JOIN_5 ), RENAME_COLUMNS_2 AS (
             SELECT RC_STATE AS T1_IN_RC_STATE, NVL(COMPANY_NAME, 'N') AS
             T1_IN_COMPANY_NAME, NVL(CONTACT_NAME, 'N') AS
             T1_IN_CONTACT_NAME, NVL(E_MAIL, 'N') AS T1_IN_E_MAIL,
             NVL(FAX_NUMBER, 'N') AS T1_IN_FAX_NUMBER, NVL(OCN, 'N') AS
             T1_IN_OCN, NVL(PHONE_NUMBER, 'N') AS T1_IN_PHONE_NUMBER FROM
             TYPE_1_PROCESSING WHERE RC_STATE LIKE :B9 ), SQL_ALT_LEC_DETAIL
             AS ( SELECT DISTINCT PHONE_NUMBER, CONTACT_NAME,
             RATE_CENTER_NAME, NPA, NXX, RC_STATE, FAX_NUMBER, E_MAIL, OCN,
             ALT_LEC_ID, (TO_CHAR(TRUNC(RANGE_START / 1000))) AS K_BLOCK,
             CH_OCN, BH_OCN, DAY FROM ALT_LEC_DETAIL WHERE (((YEAR_MONTH =
             :B13 AND DAY = '99' ) OR ( YEAR_MONTH = :B12 AND DAY <= :B11 ) )
             AND STATE LIKE :B10 AND RC_STATE LIKE :B9 AND NPA LIKE :B8 AND
             NXX LIKE :B5 AND RATE_CENTER_NAME LIKE :B7 AND WIRE_CENTER_ID
             LIKE :B6 AND BH_OCN LIKE :B4 AND NGP LIKE :B3 AND ( 'N' = :B2 OR
             INSTR(:B1 , CONCAT(':', CONCAT(CONCAT(STATE, WIRE_CENTER_ID),
             ':')) ) <> 0 ) ) ORDER BY 6 ASC, 3 ASC, 4 ASC, 5 ASC, 11 ASC ),
             EXPRESSION_CALCULATOR_4 AS ( SELECT '~' AS NOTES, ALT_LEC_ID AS
             COMPANY_NAME, SQL_ALT_LEC_DETAIL.* FROM SQL_ALT_LEC_DETAIL ),
             ADD_COLUMNS_3_2 AS ( SELECT RENAME_COLUMNS_2.*,
             EXPRESSION_CALCULATOR_4.*, 1 AS JOINCOL FROM RENAME_COLUMNS_2
             RIGHT JOIN EXPRESSION_CALCULATOR_4 ON
             RENAME_COLUMNS_2.T1_IN_RC_STATE =
             EXPRESSION_CALCULATOR_4.RC_STATE ), JOIN_3 AS ( SELECT
             EXPRESSION_CALCULATOR_2.*, ADD_COLUMNS_3_2.* FROM
             EXPRESSION_CALCULATOR_2 INNER JOIN ADD_COLUMNS_3_2 ON
             EXPRESSION_CALCULATOR_2.JOINCOL = ADD_COLUMNS_3_2.JOINCOL ),
             EXPRESSION_CALCULATOR_3 AS ( SELECT CASE WHEN T1_IN_RC_STATE IS
             NULL THEN DEFAULT_COMPANY_NAME ELSE T1_IN_COMPANY_NAME END AS
             T1_COMPANY_NAME, CASE WHEN T1_IN_RC_STATE IS NULL THEN
             DEFAULT_CONTACT_NAME ELSE T1_IN_CONTACT_NAME END AS
             T1_CONTACT_NAME, CASE WHEN T1_IN_RC_STATE IS NULL THEN
             DEFAULT_E_MAIL ELSE T1_IN_E_MAIL END AS T1_E_MAIL, CASE WHEN
             T1_IN_RC_STATE IS NULL THEN DEFAULT_FAX_NUMBER ELSE
             T1_IN_FAX_NUMBER END AS T1_FAX_NUMBER, CASE WHEN T1_IN_RC_STATE
             IS NULL THEN DEFAULT_OCN ELSE T1_IN_OCN END AS T1_OCN, CASE WHEN
             T1_IN_RC_STATE IS NULL THEN DEFAULT_PHONE_NUMBER ELSE
             T1_IN_PHONE_NUMBER END AS T1_PHONE_NUMBER, PHONE_NUMBER,
             CONTACT_NAME, RATE_CENTER_NAME, NPA, NXX, RC_STATE, FAX_NUMBER,
             E_MAIL, OCN, K_BLOCK, NOTES, COMPANY_NAME, CH_OCN, BH_OCN, DAY
             FROM JOIN_3 ), COLUMN_SELECT_3 AS ( SELECT RC_STATE,
             RATE_CENTER_NAME, NPA, NXX, K_BLOCK, NOTES, T1_COMPANY_NAME,
             T1_CONTACT_NAME, T1_E_MAIL, T1_FAX_NUMBER, T1_OCN,
             T1_PHONE_NUMBER, COMPANY_NAME, CONTACT_NAME, E_MAIL, FAX_NUMBER,
             OCN, PHONE_NUMBER, CH_OCN, BH_OCN, DAY FROM
             EXPRESSION_CALCULATOR_3 ), ADD_COLUMNS_2 AS ( SELECT 'ZZ' AS
             RC_STATE, 'ZZZZZZZZZZ' AS RATE_CENTER_NAME, 'ZZZ' AS NPA, 'ZZZ'
             AS NXX, 'Z' AS K_BLOCK, NULL AS NOTES, NULL AS T1_COMPANY_NAME,
             NULL AS T1_CONTACT_NAME, NULL AS T1_E_MAIL, NULL AS
             T1_FAX_NUMBER, NULL AS T1_OCN, NULL AS T1_PHONE_NUMBER, NULL AS
             COMPANY_NAME, NULL AS CONTACT_NAME, NULL AS E_MAIL, NULL AS
             FAX_NUMBER, NULL AS OCN, NULL AS PHONE_NUMBER, 'ZZZZ' AS CH_OCN,
             'ZZZZ' AS BH_OCN, 'ZZ' AS DAY FROM DUAL ), COLUMN_SELECT_5 AS (
             SELECT * FROM COLUMN_SELECT_3 UNION SELECT * FROM ADD_COLUMNS_2
             ), COLUMN_SELECT_6 AS ( SELECT RC_STATE, RATE_CENTER_NAME, NPA,
             NXX, K_BLOCK, LISTAGG( COMPANY_NAME || ',' || CONTACT_NAME ||
             ',' || PHONE_NUMBER || ',' || FAX_NUMBER || ',' || E_MAIL || ','
             || OCN, ',' ) WITHIN GROUP( ORDER BY RC_STATE, RATE_CENTER_NAME,
             NPA, NXX, K_BLOCK ) AS NOTES FROM COLUMN_SELECT_5 WHERE NOTES =
             '~' GROUP BY RC_STATE, RATE_CENTER_NAME, NPA, NXX, K_BLOCK ),
             JOIN_4 AS ( SELECT COLUMN_SELECT_6.NOTES AS NOTES, INST, UNAV,
             RSVD, AGNG, LRN, SDT, TEST, AVAL, "NPA-NXX", ASGN, INTM, ADMN,
             PO, OFFC, TLDN, E911, DNPL, DBL, FLOOR_DBL, STR_FLOOR_DBL,
             FRACT_DBL, STR_FRACT_DBL, STR_UTIL, UTIL, DONATED,
             RENAME_COLUMNS_5.NPA AS NPA, RENAME_COLUMNS_5.NXX AS NXX,
             RENAME_COLUMNS_5.X AS K_BLOCK, RENAME_COLUMNS_5.RC AS
             RATE_CENTER_NAME, RENAME_COLUMNS_5.RC_ST AS RC_STATE FROM
             COLUMN_SELECT_6 RIGHT JOIN RENAME_COLUMNS_5 ON
             RENAME_COLUMNS_5.NPA = COLUMN_SELECT_6.NPA AND
             RENAME_COLUMNS_5.NXX = COLUMN_SELECT_6.NXX AND
             RENAME_COLUMNS_5.X = COLUMN_SELECT_6.K_BLOCK AND
             RENAME_COLUMNS_5.RC = COLUMN_SELECT_6.RATE_CENTER_NAME AND
             RENAME_COLUMNS_5.RC_ST = COLUMN_SELECT_6.RC_STATE ),
             RENAME_COLUMNS_4 AS ( SELECT RC_STATE AS RC_ST, RATE_CENTER_NAME
             AS X_RC, NPA, NXX, K_BLOCK, NOTES AS LONG_NOTES, INST, UNAV,
             RSVD AS INT_RSVD, AGNG AS INT_AGNG, LRN, SDT, TEST, AVAL AS
             INT_AVAL, "NPA-NXX" AS "X_NPA-NXX", ASGN AS INT_ASGN, INTM AS
             INT_INTM, ADMN AS INT_ADMN, PO, OFFC, TLDN, E911, DNPL, DBL,
             FLOOR_DBL, STR_FLOOR_DBL, FRACT_DBL, STR_FRACT_DBL, STR_UTIL,
             UTIL, DONATED AS X_DONATED FROM JOIN_4 ), DISK_SORT AS ( SELECT
             CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250) ELSE ''
             END AS NOTES, CASE WHEN INT_RSVD IS NULL THEN '0' ELSE
             TO_CHAR(INT_RSVD) END AS RSVD, CASE WHEN INT_ADMN IS NULL THEN
             '0' ELSE TO_CHAR(INT_ADMN) END AS ADMN, CASE WHEN INT_INTM IS
             NULL THEN '0' ELSE TO_CHAR(INT_INTM) END AS INTM, CASE WHEN
             INT_ASGN IS NULL THEN '0' ELSE TO_CHAR(INT_ASGN) END AS ASGN,
             CASE WHEN INT_AGNG IS NULL THEN '0' ELSE TO_CHAR(INT_AGNG) END
             AS AGNG, CASE WHEN INT_AVAL IS NULL THEN '0' ELSE
             TO_CHAR(INT_AVAL) END AS AVAL, K_BLOCK AS X, X_RC AS RC,
             "X_NPA-NXX" AS "NPA-NXX", UTIL AS UTIL, X_DONATED AS DONATED,
             CASE WHEN X_DONATED = 'X' AND INT_ASGN > 100 THEN 'Block marked
             as Donated but has more than 10% contamination' ELSE '' END AS
             ERR_CONTAM, CASE WHEN INT_INTM > 0 AND (CASE WHEN INT_INTM <> 0
             THEN SUBSTR(LONG_NOTES, 1, 250) ELSE '' END IS NULL OR
             LENGTH(CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250)
             ELSE '' END) = 0) THEN 'No assignee noted for Intermediate
             numbers' ELSE '' END AS ERR_ASSIGNEE, CASE WHEN INT_ASGN +
             INT_INTM + INT_RSVD + INT_AGNG + INT_ADMN + INT_AVAL > 1000 THEN
             'Total Utilization over 1000' ELSE '' END AS ERR_TOT_TNS, CASE
             WHEN (X_DONATED = 'X' AND INT_ASGN > 100) AND (INT_INTM > 0 AND
             (CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250) ELSE ''
             END IS NULL OR LENGTH(CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END) = 0)) THEN 'Block marked
             as Donated but has more than 10% contamination' || ',' || 'No
             assignee noted for Intermediate numbers' ELSE CASE WHEN
             X_DONATED = 'X' AND INT_ASGN > 100 THEN 'Block marked as Donated
             but has more than 10% contamination' ELSE CASE WHEN INT_INTM > 0
             AND (CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250)
             ELSE '' END IS NULL OR LENGTH(CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END) = 0) THEN 'No assignee
             noted for Intermediate numbers' ELSE '' END END END AS
             ERR_TMP_1, CASE WHEN (INT_ASGN + INT_INTM + INT_RSVD + INT_AGNG
             + INT_ADMN + INT_AVAL > 1000) AND ( ( (X_DONATED = 'X' AND
             INT_ASGN > 100) AND (INT_INTM > 0 AND (CASE WHEN INT_INTM <> 0
             THEN SUBSTR(LONG_NOTES, 1, 250) ELSE '' END IS NULL OR
             LENGTH(CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250)
             ELSE '' END) = 0)) ) OR (X_DONATED = 'X' AND INT_ASGN > 100) OR
             (INT_INTM > 0 AND (CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END IS NULL OR LENGTH(CASE
             WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250) ELSE '' END)
             = 0)) ) THEN 'Total Utilization over 1000' || ',' || CASE WHEN
             (X_DONATED = 'X' AND INT_ASGN > 100) AND (INT_INTM > 0 AND (CASE
             WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250) ELSE '' END
             IS NULL OR LENGTH(CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END) = 0)) THEN 'Block marked
             as Donated but has more than 10% contamination' || ',' || 'No
             assignee noted for Intermediate numbers' ELSE CASE WHEN
             X_DONATED = 'X' AND INT_ASGN > 100 THEN 'Block marked as Donated
             but has more than 10% contamination' ELSE CASE WHEN INT_INTM > 0
             AND (CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250)
             ELSE '' END IS NULL OR LENGTH(CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END) = 0) THEN 'No assignee
             noted for Intermediate numbers' ELSE '' END END END ELSE CASE
             WHEN INT_ASGN + INT_INTM + INT_RSVD + INT_AGNG + INT_ADMN +
             INT_AVAL > 1000 THEN 'Total Utilization over 1000' ELSE CASE
             WHEN (X_DONATED = 'X' AND INT_ASGN > 100) AND (INT_INTM > 0 AND
             (CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250) ELSE ''
             END IS NULL OR LENGTH(CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END) = 0)) THEN 'Block marked
             as Donated but has more than 10% contamination' || ',' || 'No
             assignee noted for Intermediate numbers' ELSE CASE WHEN
             X_DONATED = 'X' AND INT_ASGN > 100 THEN 'Block marked as Donated
             but has more than 10% contamination' ELSE CASE WHEN INT_INTM > 0
             AND (CASE WHEN INT_INTM <> 0 THEN SUBSTR(LONG_NOTES, 1, 250)
             ELSE '' END IS NULL OR LENGTH(CASE WHEN INT_INTM <> 0 THEN
             SUBSTR(LONG_NOTES, 1, 250) ELSE '' END) = 0) THEN 'No assignee
             noted for Intermediate numbers' ELSE '' END END END END END AS
             "ERRORS/MESSAGES" FROM RENAME_COLUMNS_4 ORDER BY "NPA-NXX" ASC,
             X ASC, RC ASC ) SELECT "NPA-NXX", X, RC, ASGN, INTM, RSVD, AGNG,
             ADMN, DONATED, NOTES, AVAL, UTIL, "ERRORS/MESSAGES" FROM
             DISK_SORT