-- RUN BEFORE ANY OTHER QUERY:
ALTER SESSION SET NLS_DATE_FORMAT='DD-MON-YYYY HH24:MI:SS';
SET LINES 280 PAGESIZE 1000 LONG 15000 ECHO ON TIME ON TIMING ON TRIM ON TRIMSPOOL ON UNDERLINE =
=========================================================================================================================================
-- CHECK COMPLETE BACKUPS
COL INPUT_TYPE HEADING 'BACKUP|TYPE' FOR A12
COL BACKUP_TYPE HEADING 'BACKUP|TYPE' FOR A15
COL START_TIME HEADING 'START|TIME' FOR A30
COL END_TIME HEADING 'END|TIME' FOR A30
COL STATUS HEADING 'BACKUP|STATUS' FOR A10
COL DURATION HEADING 'DURATION|(HRS)' FOR 999.999
SELECT INPUT_TYPE , STATUS, TO_CHAR(START_TIME,'MON/DD/YYYY HH24:MI:SS') START_TIME, TO_CHAR(END_TIME,'MON/DD/YYYY HH24:MI:SS') END_TIME, ELAPSED_SECONDS/3600 DURATION
FROM V$RMAN_BACKUP_JOB_DETAILS
WHERE START_TIME >= TRUNC(SYSDATE) -7
AND INPUT_TYPE IN ('DB FULL','DB INCR','ARCHIVELOG')
--AND INPUT_TYPE IN ('DB FULL','DB INCR')
--AND INPUT_TYPE IN ('ARCHIVELOG')
ORDER BY SESSION_KEY;
=========================================================================================================================================
-- CHECK ONGOING BACKUPS
COL INPUT_BYTES_DISPLAY HEADING 'READ|SOFAR' FOR A10
COL OUTPUT_BYTES_DISPLAY HEADING 'WRITE|SOFAR' FOR A10
COL INPUT_TYPE HEADING 'BACKUP|TYPE' FOR A12
COL TIME_TAKEN_DISPLAY HEADING 'TIME|SPENT' FOR A10
COL START_TIME HEADING 'START|TIME' FOR A22
COL END_TIME HEADING 'END|TIME' FOR A22
COL SESSION_RECID HEADING 'SESSION|RECID' FOR A10
COL SESSION_STAMP HEADING 'SESSION|STAMP' FOR A15
COL STATUS HEADING 'BACKUP|STATUS' FOR A10
COL OUTPUT_DEVICE_TYPE HEADING 'BACKUP|MEDIA' FOR A8
SELECT TO_CHAR(START_TIME,'MON/DD/YYYY HH24:MI:SS') START_TIME, TO_CHAR(END_TIME,'MON/DD/YYYY HH24:MI:SS') END_TIME, TO_CHAR(SESSION_RECID) SESSION_RECID, TO_CHAR(SESSION_STAMP) SESSION_STAMP, INPUT_TYPE, STATUS,INPUT_BYTES_DISPLAY, OUTPUT_BYTES_DISPLAY, TIME_TAKEN_DISPLAY, OUTPUT_DEVICE_TYPE
FROM V$RMAN_BACKUP_JOB_DETAILS
WHERE START_TIME > TRUNC(SYSDATE) -7
--AND INPUT_TYPE IN ('DB FULL','DB INCR','ARCHIVELOG')
AND INPUT_TYPE IN ('DB FULL','DB INCR')
--AND INPUT_TYPE IN ('ARCHIVELOG')
ORDER BY START_TIME;
=========================================================================================================================================
--CHECK BACKUP SIZE
SELECT TO_CHAR(COMPLETION_TIME, 'YYYY-MM-DD') COMPLETED, TYPE, ROUND(SUM(BYTES)/1048576) "SIZE(MB)", ROUND(SUM(ELAPSED_SECONDS)/60) "TIME(MIN)"
FROM
(
SELECT
CASE
  WHEN S.BACKUP_TYPE='L' THEN 'ARCHIVELOG'
  WHEN S.CONTROLFILE_INCLUDED='YES' THEN 'CONTROLFILE'
  WHEN S.BACKUP_TYPE='D' AND S.INCREMENTAL_LEVEL=0 THEN 'LEVEL0'
  WHEN S.BACKUP_TYPE='I' AND S.INCREMENTAL_LEVEL=1 THEN 'LEVEL1'
END TYPE,
TRUNC(S.COMPLETION_TIME) COMPLETION_TIME, P.BYTES, S.ELAPSED_SECONDS
FROM V$BACKUP_PIECE P, V$BACKUP_SET S
WHERE P.STATUS='A' AND P.RECID=S.RECID
UNION ALL
SELECT 'DATAFILECOPY' TYPE, TRUNC(COMPLETION_TIME), OUTPUT_BYTES, 0 ELAPSED_SECONDS FROM V$BACKUP_COPY_DETAILS
)
GROUP BY TO_CHAR(COMPLETION_TIME, 'YYYY-MM-DD'), TYPE
ORDER BY 1 ASC,2,3;
=========================================================================================================================================
--CHECK BACKUP SIZE:
COL BACKUP_SIZE FOR A20
SELECT
INPUT_TYPE "BACKUP_TYPE",
--NVL(INPUT_BYTES/(1024*1024),0)"INPUT_BYTES(MB)",
--NVL(OUTPUT_BYTES/(1024*1024),0) "OUTPUT_BYTES(MB)",
STATUS,
TO_CHAR(START_TIME,'MM/DD/YYYY:HH24:MI:SS') AS START_TIME,
TO_CHAR(END_TIME,'MM/DD/YYYY:HH24:MI:SS') AS END_TIME,
TRUNC((ELAPSED_SECONDS/60),2) "ELAPSED_TIME(MIN)",
--ROUND(COMPRESSION_RATIO,3)"COMPRESSION_RATIO",
--ROUND(INPUT_BYTES_PER_SEC/(1024*1024),2) "INPUT_BYTES_PER_SEC(MB)",
--ROUND(OUTPUT_BYTES_PER_SEC/(1024*1024),2) "OUTPUT_BYTES_PER_SEC(MB)",
--INPUT_BYTES_DISPLAY "INPUT_BYTES_DISPLAY",
OUTPUT_BYTES_DISPLAY "BACKUP_SIZE",
OUTPUT_DEVICE_TYPE "OUTPUT_DEVICE"
--INPUT_BYTES_PER_SEC_DISPLAY "INPUT_BYTES_PER_SEC_DIS",
--OUTPUT_BYTES_PER_SEC_DISPLAY "OUTPUT_BYTES_PER_SEC_DIS"
FROM V$RMAN_BACKUP_JOB_DETAILS
WHERE START_TIME > SYSDATE -7
--AND INPUT_TYPE != 'ARCHIVELOG'
--AND INPUT_TYPE = 'ARCHIVELOG'
ORDER BY END_TIME DESC;
=========================================================================================================================================
-- CHECK DAILY ARCHIVE GENERATION:
SELECT TRUNC(COMPLETION_TIME,'DD') DAY, THREAD#, ROUND(SUM(BLOCKS*BLOCK_SIZE)/1024/1024/1024) GB, COUNT(*) ARCHIVES_GENERATED 
FROM V$ARCHIVED_LOG 
GROUP BY TRUNC(COMPLETION_TIME,'DD'), THREAD# 
ORDER BY 1;
=========================================================================================================================================
-- CHECK HOURLY ARCHIVE GENERATION:
SELECT TRUNC(COMPLETION_TIME,'HH') HOUR, THREAD#, ROUND(SUM(BLOCKS*BLOCK_SIZE)/1024/1024/1024) GB, COUNT(*) ARCHIVES 
FROM V$ARCHIVED_LOG 
GROUP BY TRUNC(COMPLETION_TIME,'HH'),THREAD# 
ORDER BY 1;
=========================================================================================================================================
-- CHECK ARCHIVE GENERATION ON 24H PERIOD BY HOUR:
SET HEAD ON
COL "DAY" FOR A25
COL "00" FOR A4
COL "01" FOR A4
COL "02" FOR A4
COL "03" FOR A4
COL "04" FOR A4
COL "05" FOR A4
COL "06" FOR A4
COL "07" FOR A4
COL "08" FOR A4
COL "09" FOR A4
COL "10" FOR A4
COL "11" FOR A4
COL "12" FOR A4
COL "13" FOR A4
COL "14" FOR A4
COL "15" FOR A4
COL "16" FOR A4
COL "17" FOR A4
COL "18" FOR A4
COL "19" FOR A4
COL "20" FOR A4
COL "21" FOR A4
COL "22" FOR A4
COL "23" FOR A4
SET COLSEP ""
SELECT TRUNC(FIRST_TIME) "DAY",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'00',1,0)),'999') "00",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'01',1,0)),'999') "01",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'02',1,0)),'999') "02",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'03',1,0)),'999') "03",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'04',1,0)),'999') "04",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'05',1,0)),'999') "05",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'06',1,0)),'999') "06",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'07',1,0)),'999') "07",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'08',1,0)),'999') "08",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'09',1,0)),'999') "09",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'10',1,0)),'999') "10",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'11',1,0)),'999') "11",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'12',1,0)),'999') "12",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'13',1,0)),'999') "13",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'14',1,0)),'999') "14",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'15',1,0)),'999') "15",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'16',1,0)),'999') "16",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'17',1,0)),'999') "17",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'18',1,0)),'999') "18",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'19',1,0)),'999') "19",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'20',1,0)),'999') "20",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'21',1,0)),'999') "21",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'22',1,0)),'999') "22",
	TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'23',1,0)),'999') "23"
FROM V$LOG_HISTORY
WHERE TRUNC(FIRST_TIME) >= TRUNC(SYSDATE -10)
GROUP BY TRUNC(FIRST_TIME)
ORDER BY TRUNC(FIRST_TIME);
=========================================================================================================================================
-- CHECK RESTORE FILES:
COL "SID/SER" FOR A11
COL FILENAME FOR A70
COL STATUS FOR A15
COL "COMPLETED" FOR 999.99
SELECT ''||SID||','||SERIAL||'' "SID/SER", FILENAME, STATUS, BYTES/TOTAL_BYTES*100 "COMPLETED", EFFECTIVE_BYTES_PER_SECOND/1024/1024 "MB/S" 
FROM V$BACKUP_ASYNC_IO 
WHERE TYPE = 'OUTPUT' 
AND BYTES<>0 
ORDER BY STATUS, FILENAME;
=========================================================================================================================================
-- CHECK RESTORE TIME:
COL OPNAME FOR A70
COL PCT_DONE FOR A8
SELECT SL.SID, SL.OPNAME, TO_CHAR(100*(SOFAR/TOTALWORK), '990.99')||'%' PCT_DONE, SYSDATE+(TIME_REMAINING/60/60/24) DONE_BY
FROM V$SESSION_LONGOPS SL, V$SESSION S
WHERE SL.SID = S.SID
AND SL.SERIAL# = S.SERIAL#
AND SL.SID IN (SELECT SID FROM V$SESSION WHERE MODULE LIKE 'backup%' OR MODULE LIKE 'restore%'OR MODULE LIKE 'recover%' OR MODULE LIKE 'rman%')
AND SOFAR != TOTALWORK
AND TOTALWORK > 0;
=========================================================================================================================================

COL SCN FOR 999999999999999999
COL "GUARANTEE" FOR A10
COL "SIZE(GB)" FOR 999.999.999.999
SELECT SCN, GUARANTEE_FLASHBACK_DATABASE "GUARANTEE", (STORAGE_SIZE/1024/1024) "SIZE(GB)", TIME, NAME FROM V$RESTORE_POINT;
=========================================================================================================================================
-- DATAPUMP
=========================================================================================================================================
-- RUN BEFORE ANY OTHER QUERY:
ALTER SESSION SET NLS_DATE_FORMAT='DD-MON-YYYY HH24:MI:SS';
SET LINES 300 PAGESIZE 1000 LONG 15000 ECHO ON TIME ON TIMING ON TRIM ON TRIMSPOOL ON UNDERLINE =
=========================================================================================================================================
-- FIND JOB NAME:
COL OWNER_NAME FORMAT A10;
COL JOB_NAME FORMAT A20
COL STATE FORMAT A11
COL OPERATION LIKE STATE
COL JOB_MODE LIKE STATE
SELECT * FROM DBA_DATAPUMP_JOBS WHERE STATE='EXECUTING';
=========================================================================================================================================
-- CHECK TOTAL WORK:
SELECT SID, SERIAL#, SOFAR, TOTALWORK,
DP.OWNER_NAME, DP.STATE, DP.JOB_MODE
FROM GV$SESSION_LONGOPS SL, GV$DATAPUMP_JOB DP
WHERE SL.OPNAME = DP.JOB_NAME AND SOFAR != TOTALWORK;
=========================================================================================================================================
-- CHECK ACTUAL ITEM WORK:
SELECT SID, SERIAL#, OPNAME, SOFAR, TOTALWORK,
ROUND(SOFAR/TOTALWORK*100,2) COMPLETE
FROM V$SESSION_LONGOPS
WHERE TOTALWORK != 0 AND SOFAR != TOTALWORK
ORDER BY 1;