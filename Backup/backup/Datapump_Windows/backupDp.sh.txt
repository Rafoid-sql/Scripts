#!/bin/bash
# set the STRING variable

# Esse script é usado para crontab, backup diario.
###!/bin/bash
###set the STRING variable
#######################################################
# Autor: Jailson Sc2011                               #
# Email: jailson.schhmoeller                          #
# Data.: 16/02/@teiko.com.br                          #
#                                                     #
# Alterado por: Gustavo Mario Daros - Teiko           #
# Alterado em : 20/04/2011                            #
# Motivo      : Gerar evento para o monitoramento a   #
#               nivel de backup e nao a cada owner    #
# Alterado por: Rafael Stoever - Teiko                #
# Alterado em : 20/09/2012                            #
# Motivo      : Controle de erros ORA-01466 contra a  #
#               a tabela teikobkp.tk_bkp_exclui_tabela#
#               ignorando o erro no monitoramento se  #
# Alterado por: Rafael Stoever - Teiko                #
# Alterado em : 06/12/2012                            #
# Motivo      : Checagem do arquivo de log qdo houver #
#               um fatal erro o backup eh abortado e  #
#               deve ser enviado um alert de error.   #
# Alterado por: Joao Vitor - Teiko                    #
# Alterado em : 01/02/2013                            #
# Motivo      : Controle dos owner ignorado sera      #
#               realizado pela tabela TK_BK_OWNER     #
# Alterado por: Joao Vitor - Teiko                    #
# Alterado em : 20/05/2014                            #
# Motivo      : Controle de verificaÃ§Ã£o do errp     #
#               Caso seja ignorado uma tabela da      #
#               verificaÃ§ao a mesma nao alertar se   #
#               ocorrer erro nela                     #
# Alterado por: Romulo Bendini Madalena - Teiko       #
# Alterado em : 22/11/2017                            #
# Motivo      : Utiliza um pacote customizado para    #
#               dbms_datapump para criar um arquivo   #
#               de controle para o Clonedb            #
#               ocorrer erro nela                     #
#######################################################
# Descricao:                                          #
#######################################################
# Descricao: Rotina via Expdp (datapump) por:         #
#    Opcoes: owner -> Faz backup por owner.           #
#            full  -> Faz backup full da base.        #
#   Exemplo:sh TkBackupExpdp.sh $ORACLE_SID owner 3 S #
#######################################################



DISPLAY(){
echo "[`date '+%d/%m/%Y %T'`] $*" >> $ARQ_LOG_GERAL
}



GERA_CHECKSUM_ARQUIVO_DMP(){
# Define e cria arquivos de trabalho
ARQ_W01="${DIR_TMP}/arq_temp_1.txt"
> $ARQ_W01
ARQ_W02="${DIR_TMP}/arq_temp_2.txt"
> $ARQ_W02

# executa processo
DISPLAY "==============================="
DISPLAY "Gera checksum"
(while read LIN_ARQ
do
     # Leitura do arquivo
     # echo "Linha: "$LIN_ARQ
     # Separa inicio
     LIN_INICIO="`echo $LIN_ARQ | cut -c 1-10`"

     case $LIN_INICIO in
          EXPDP_ID_1)
               # Especifico para a linha iniciada com EXPDP_ID_1
               ARQ_DMP_1=`echo $LIN_ARQ | awk -F"[" '{print $2 }'`
               ARQ_DMP_2=`echo $ARQ_DMP_1 | awk -F"]" '{print $1 }'`
               DISPLAY "Arquivo dmp: "$ARQ_DMP_2

               # Executa checksum
               DS_CHK_SUM="`md5sum $ARQ_DMP_2 | cut -f1 -d" "`"
               DISPLAY "checksum (md5sum): "$DS_CHK_SUM

               # Gera linha com o check sum do arquivo para o arquivo de saida
               echo $LIN_ARQ",CHECKSUM["$DS_CHK_SUM"]" >> $ARQ_W02
               ;;
          *)
               # Gera linha sem alteracao para o arquivo de saida
               echo $LIN_ARQ >> $ARQ_W02
               ;;
     esac

done) < ${DIR_DMP}/$ARQ_CTL

# Renomeia arquivo de saida
cat $ARQ_W02 > ${DIR_DMP}/$ARQ_CTL # Arquivo com conteudo novo

# Remover arquivos de trabalho
rm -f $ARQ_W01
rm -f $ARQ_W02
}



EVENTO(){
  DESCRICAO_MENSAGEM="$1"
  SEVERIDADE_MENSAGEM=$2
  ANEXO_MENSAGEM=$3

  if [ ${BKP_MONITORADO} = "S" ]
  then
    if [ ${SEVERIDADE_MENSAGEM} = 2 ]
    then
          sh ${FAROL} --alvo=${INSTANCE} --aplicacao=Backup_Teiko --objeto=expdp_${INSTANCE} --severidade=${SEVERIDADE_MENSAGEM} --im=expdp_${INSTANCE} --anexo=${ANEXO_MENSAGEM} --mensagem=${DESCRICAO_MENSAGEM}
      echo "Log em Anexo" | mutt -s "`hostname`_${INSTANCE}_:${DESCRICAO_MENSAGEM}" -a ${ANEXO_MENSAGEM} ${EMAIL}
        fi
    if [ ${SEVERIDADE_MENSAGEM} = 0 ]
    then
      sh ${FAROL} --alvo=${INSTANCE} --aplicacao=Backup_Teiko --objeto=expdp_${INSTANCE} --severidade=${SEVERIDADE_MENSAGEM} --im=expdp_${INSTANCE} --mensagem=${DESCRICAO_MENSAGEM}
      echo "Log em Anexo" | mutt -s "`hostname`_${INSTANCE}_:${DESCRICAO_MENSAGEM}" -a ${ANEXO_MENSAGEM} ${EMAIL}
        fi
  fi
}


EVENTO_COPIA(){
# Funcao que efetua o envio de evento para o monitoramento
  DESCRICAO_MENSAGEM="$1"
  SEVERIDADE_MENSAGEM=$2
  ANEXO_MENSAGEM=$3

  if [ ${BKP_MONITORADO} = "S" ]
  then
    if [ ${SEVERIDADE_MENSAGEM} = 2 ]
    then
          ERRO_COPIA=1
      sh ${FAROL} --alvo=${INSTANCE} --aplicacao=Backup_Teiko --objeto=copia_expdp_${INSTANCE} --severidade=${SEVERIDADE_MENSAGEM} --im=copia_expdp_${INSTANCE} --anexo=${ANEXO_MENSAGEM} --mensagem=${DESCRICAO_MENSAGEM}
      echo "Log em Anexo" | mutt -s "${DESCRICAO_MENSAGEM}" -a ${ANEXO_MENSAGEM} ${EMAIL}
        fi
    if [ ${SEVERIDADE_MENSAGEM} = 0 ]
    then
      sh ${FAROL} --alvo=${INSTANCE} --aplicacao=Backup_Teiko --objeto=copia_expdp_${INSTANCE} --severidade=${SEVERIDADE_MENSAGEM} --im=copia_expdp_${INSTANCE} --mensagem=${DESCRICAO_MENSAGEM}
      echo "Log em Anexo" | mutt -s "${DESCRICAO_MENSAGEM}" -a ${ANEXO_MENSAGEM} ${EMAIL}
        fi
  fi
}



GERA_OWNER(){
# Funcao para Gerar Lista de todos os owner da base com tabelas
# Criar a tabela TK_BKP_OWNER e inserir nela os owner que serao Ignorados do BACKUP
${ORACLE_HOME}/bin/sqlplus -s ${USER_EXPORT}/$USER_EXPORT_PASSWORD@${INSTANCE} 2>&1 > /dev/null <<EOF
whenever sqlerror exit sql.sqlcode ;
set tab off
set pagesize 0
set linesize 80
set feedback off
set termout off
spool ${ARQ_OWNER}
SELECT
                OWNER
           FROM
                DBA_OBJECTS
           HAVING
                COUNT(*) > 0 AND UPPER(OWNER) NOT IN (SELECT
                UPPER(NOMOWN)
           FROM
               TK_BKP_OWNER )
           GROUP BY
                OWNER;
spool off;
quit
EOF

if [ "$?" = "0" ]
then
  DISPLAY "Gerando a Lista dos Usuarios..: OK"
  DISPLAY "==============================="
  DISPLAY "Lista de owners:"
  cat ${ARQ_OWNER} >> ${ARQ_LOG_GERAL}
  DISPLAY "==============================="
else
  DISPLAY "Gerando Lista de Usuario......: ERRO"
  cat ${ARQ_OWNER} >> ${ARQ_LOG_GERAL}

  EVENTO "Erro na Geracao da Lista de Usuarios do Backup via DATAPUMP" 2 ${ARQ_LOG_GERAL}

fi
}



CAPTURA_SCN(){
#Funcao para capturar scn para gerar backup consistente
${ORACLE_HOME}/bin/sqlplus -s ${USER_EXPORT}/$USER_EXPORT_PASSWORD@${INSTANCE} 2>&1 > /dev/null <<EOF
whenever sqlerror exit sql.sqlcode ;
set tab off
set pagesize 0
set linesize 80
set feedback off
set termout off
spool ${SCN_ATUAL}
select trim(to_char(current_scn)) from v\$database;
spool off;
quit
EOF

if [ "$?" = "0" ]
then
  DISPLAY "Capturado SCN atual da base de dados..: OK"
  DISPLAY "==============================="
  cat ${SCN_ATUAL} >> ${ARQ_LOG_GERAL}
  DISPLAY "==============================="
else
  DISPLAY "Falha ao pegar SCN atual......: ERRO"

  EVENTO "Erro no SELECT do SCN do Banco de Dados" 2 ${ARQ_LOG_GERAL}

fi

}



GERAR_LST_ORA(){
${ORACLE_HOME}/bin/sqlplus -s ${USER_EXPORT}/$USER_EXPORT_PASSWORD@${INSTANCE} 2>&1 <<EOF
whenever sqlerror exit sql.sqlcode ;
set tab off
set pagesize 0
set linesize 80
set feedback off
set termout off
spool ${DIR_TMP}/usuario.txt
SELECT distinct(owner) from TK_BKP_EXCLUI_TABELA;
spool off;
spool ${DIR_TMP}/tk_bkp_exclui_tabela.txt
select '"'||owner||'"."'||tabela||'"' from tk_bkp_exclui_tabela group by owner,tabela;
spool off;
quit
EOF

achou=0
if [ "$(cat ${TMP_FILE2} | grep "ORA-31693")" != "" ]; then
cat ${TMP_FILE2} | grep "ORA-31693" > ${ERRO}
        if [ "${TIPO}" = "OWNER" ]; then
                awk '{print $5}' ${ERRO} > ${LOG_COMPARA}
                for i in `cat ${LOG_COMPARA}`
                do
                        AC=`cat ${USER_TABLES} | grep -c ${i}`
                        if [ ${AC} -ne 1 ]; then
                                echo ${i} >> ${LOG_COMPARA}.erro
                                achou=1
                        fi
                done
        elif [ "${TIPO}" = "FULL" ]; then
                awk '{print $5}' ${ERRO} > ${LOG_COMPARA}
                for i in `cat ${LOG_COMPARA}`
                do
                        AC=`cat ${USER_TABLES} | grep -c ${i}`
                        if [ ${AC} -ne 1 ]; then
                                echo ${i} >> ${LOG_COMPARA}.erro
                                achou=1
                        fi
                done
        fi
        if [  "${achou}" = "0" ]
        then
                FIM_EXPORT=OK
        else
                FIM_EXPORT=ERRO
        fi
else
        FIM_EXPORT=OK
fi
}

REMOTO (){
echo "Inciando copia remota do Backup Logico do Banco de Dados ${ORACLE_SID}" >> ${ARQ_LOG_GERAL}
rsync -av /orabackup/sthds/logico/files/ /mnt/orabackup/sthds/logico/files/ --delete >> ${ARQ_LOG_GERAL}
ret1=$?
rsync -av /orabackup/sthds/logico/log/ /mnt/orabackup/sthds/logico/log/ --delete >> ${ARQ_LOG_GERAL}
ret=$?
if [ "${ret}" != "0" ] || [ "${ret1}" != "0" ]
then
   echo " Erro copia remota do Backup Logico do Banco de Dados ${ORACLE_SID}" >> ${ARQ_LOG_GERAL}
   EVENTO "Erro copia remota do Backup Logico do Banco de Dados ${ORACLE_SID}" 2 ${ARQ_LOG_GERAL}
   FIM_EXPORT=ERRO
else
   echo " Sucesso copia remota do Backup Logico do Banco de Dados ${ORACLE_SID}" >> ${ARQ_LOG_GERAL}
   EVENTO "Sucesso na copia remota do Backup Logico do Banco de Dados ${ORACLE_SID}" 0 ${ARQ_LOG_GERAL}
   FIM_EXPORT=OK
fi
}



EXPORT_OWNER(){
# Gera A lista de Usuarios com tabelas
GERA_OWNER
# executa Expdp
for USUARIO in `cat ${ARQ_OWNER}`
do

  #Captura SCN da base de dados
  CAPTURA_SCN
  SCN=`cat ${SCN_ATUAL}`

  DIR_DMP_DIR="DATA_PUMP"
  ARQ_DMP=${INSTANCE}.${USUARIO}%U.`date +%Y%m%d%H`.dmp
  ARQ_LOG=${INSTANCE}.${USUARIO}.`date +%Y%m%d%H`.log
  ARQ_CTL=${INSTANCE}.${USUARIO}.`date +%Y%m%d%H`.ctl
  DMP_DEGREE="NULL"
  DMP_FILE_SIZE="15G"
  CAMINHOCTL="NULL"

  ARQ_LOG_EXE_EXP=${DIR_TMP}/${INSTANCE}.${USUARIO}.`date +%Y%m%d%H`.logsql
  set TMP_FILE2=${DIR_TMP}/${INSTANCE}.${USUARIO}.`date +%Y%m%d%H`.tmp

  DISPLAY "Expdp do Usuario..............: ${USUARIO}"
  DISPLAY "Inicio........................: `date '+%d/%m/%Y %T'`"

  ${ORACLE_HOME}/bin/sqlplus -s ${USER_EXPORT}/$USER_EXPORT_PASSWORD@${INSTANCE} 2>&1 > /dev/null <<EOF
whenever sqlerror exit sql.sqlcode ;
set tab off
set pagesize 0
set linesize 80
set feedback off
set termout on
spool ${ARQ_LOG_EXE_EXP}
var CaminhoCTL varchar2(10000);
BEGIN
   TK_CLONEDB_DATAPUMP.TK_DISPARA_BACKUP_POR_OWNER(p_schema => '${USUARIO}'
                                                  ,p_dump_dir => '${DIR_DMP_DIR}'
                                                  ,p_dump_file => '${ARQ_DMP}'
                                                  ,p_log_file => '${ARQ_LOG}'
                                                  ,p_file_ctl => '${ARQ_CTL}'
                                                  ,p_degree => $DMP_DEGREE
                                                  ,p_FileSize => '${DMP_FILE_SIZE}'
                                                  ,p_Version => '${ORACLE_VERSION}'
                                                  ,p_Caminhoctl => :CaminhoCTL );
END;
/
l
spool off;
quit
EOF
  # Copia arquivo de log
  cat ${DIR_DMP}/${ARQ_LOG} > ${TMP_FILE2}

  #Verifica se o backup foi executado com sucesso
  if [ -e ${ARQ_LOG_EXE_EXP} ]
  then
          if [ "$(cat ${ARQ_LOG_EXE_EXP} | grep -e "${PROC_SUCESS}")" == "" ] || [ "$(cat ${ARQ_LOG_EXE_EXP} | grep -e "ORA-" -e "EXP-")" != "" ];
          then
                  GERAR_LST_ORA
          else
                  FIM_EXPORT=OK
          fi
  else
    FIM_EXPORT=ERRO
  fi
  rm  ${ARQ_LOG_EXE_EXP}

  #Complementa arquivo de control .ctl
  GERA_CHECKSUM_ARQUIVO_DMP

  #Compacta arquivos .dmp
  gzip -f ${DIR_DMP}/*.dmp
  FIM_COMPACTACAO=OK

  #Verifica se a compactacao dos dumps foi efetuada com sucesso
  if [ "$?" = "0" ]
  then
    FIM_COMPACTACAO=OK
  else
    FIM_COMPACTACAO=ERRO
  fi

  #Verifica se todo o procedimento do backup de cada owner foi efetuado com sucesso
  DISPLAY "==============================="
  if [ "${FIM_EXPORT}" = "OK" ] && [ "${FIM_COMPACTACAO}" = "OK" ]
  then
    mv ${DIR_DMP}/${ARQ_LOG} ${DIR_LOG}/${ARQ_LOG}.ok
    set STATUS=OK
    DISPLAY "Fim...........................: `date '+%d/%m/%Y %T'`"
    DISPLAY "Log Execucao..................: ${DIR_LOG}/${ARQ_LOG}.ok"
    DISPLAY "Status........................: ${STATUS}"
  else
    ERROR_COUNT=`expr $ERROR_COUNT + 1`
    set STATUS=ERRO
    DISPLAY "Fim...........................: `date '+%d/%m/%Y %T'`"

    if [ "${FIM_EXPORT}" != "OK" ]
    then
      DISPLAY "Export........................: ${FIM_EXPORT}"
    fi

    if [ "${FIM_COMPACTACAO}" != "OK" ]
    then
      DISPLAY "Compactacao...................: ${FIM_COMPACTACAO}"
    fi

    mv ${DIR_DMP}/${ARQ_LOG} ${DIR_LOG}/${ARQ_LOG}.erro
    DISPLAY "Log Execucao..................: ${DIR_LOG}/${ARQ_LOG}.erro"
    DISPLAY "Status........................: ${STATUS}"
  fi
  DISPLAY "==============================="

done


#Gera o resumo geral do backup

if [ "${ERROR_COUNT}" = "0" ]
then
  STATUS_GERAL=OK
else
  STATUS_GERAL=ERRO
fi

FIM_BACKUP="`date '+%d/%m/%Y %T'`"

DISPLAY "==============================="
DISPLAY "==============================="
DISPLAY "====R E S U M O   G E R A L===="
DISPLAY "Inicio do Backup..............: ${INICIO_BACKUP}"
DISPLAY "Fim do Backup.................: ${FIM_BACKUP}"

if [ "${STATUS_GERAL}" != "OK" ]
then
  DISPLAY "Owners com Erro...............: ${ERROR_COUNT}"
fi

DISPLAY "Log da Execucao do Backup.....: ${ARQ_LOG_GERAL}"
DISPLAY "Status do Backup..............: ${STATUS_GERAL}"
DISPLAY "==============================="
DISPLAY "==============================="


if [ "${STATUS_GERAL}" = "OK" ]
then
    EVENTO "Sucesso na execucao do backup OWNER via DATAPUMP" 0
else
    EVENTO "ERRO na execucao do backup OWNER via DATAPUMP" 2 ${ARQ_LOG_GERAL}
fi

}



EXPORT_FULL(){
  # Captura SCN da base de dados
  CAPTURA_SCN
  SCN=`cat ${SCN_ATUAL}`

  DIR_DMP_DIR="DATA_PUMP_TK"
  ARQ_DMP=${INSTANCE}.FULL%U.`date +%Y%m%d%H`.dmp
  ARQ_LOG=${INSTANCE}.FULL.`date +%Y%m%d%H`.log
  ARQ_CTL=${INSTANCE}.FULL.`date +%Y%m%d%H`.ctl
  DMP_DEGREE="NULL"
  DMP_FILE_SIZE="15G"
  CAMINHOCTL="NULL"

  ARQ_LOG_EXE_EXP=${DIR_TMP}/${INSTANCE}.FULL.`date +%Y%m%d%H`.logsql


# DISPLAY "-------------------------------"
# DISPLAY "-------------------------------"
# DISPLAY "-----N O V O   B A C K U P-----"
# DISPLAY "-------------------------------"
# DISPLAY "-------------------------------"
  DISPLAY "Inicio do Backup Expdp.......: ${PARAMETRO_LINHA}"
  DISPLAY "..............................: Inicio"

${ORACLE_HOME}/bin/sqlplus -s ${USER_EXPORT}/$USER_EXPORT_PASSWORD@${INSTANCE} 2>&1 > /dev/null <<EOF
whenever sqlerror exit sql.sqlcode ;
set tab off
set pagesize 0
set linesize 80
set feedback off
set termout on
spool ${ARQ_LOG_EXE_EXP}
var CaminhoCTL varchar2(1000);
BEGIN
   TK_CLONEDB_DATAPUMP.TK_DISPARA_BACKUP_POR_FULL(p_dump_dir => '${DIR_DMP_DIR}'
                                                 ,p_dump_file => '${ARQ_DMP}'
                                                 ,p_log_file => '${ARQ_LOG}'
                                                 ,p_file_ctl => '${ARQ_CTL}'
                                                 ,p_degree => $DMP_DEGREE
                                                 ,p_FileSize => '${DMP_FILE_SIZE}'
                                                 ,p_Version => '${ORACLE_VERSION}'
                                                 ,p_Caminhoctl => :CAMINHOCTL);

END;
/
l
spool off;
quit
EOF

# Copia arquivo de log
cat ${DIR_DMP}/${ARQ_LOG} > ${TMP_FILE2}

#Verifica se o backup foi executado com sucesso
if [ -e ${ARQ_LOG_EXE_EXP} ]
then
        if [ "$(cat ${ARQ_LOG_EXE_EXP} | grep -e "$PROC_SUCESS")" == "" ] || [ "$(cat ${ARQ_LOG_EXE_EXP} | grep -e "ORA-" -e "EXP-")" != "" ];
        then
             FIM_EXPORT=ERRO
             GERAR_LST_ORA
        else
             FIM_EXPORT=OK
        fi
else
  FIM_EXPORT=ERRO
fi
rm  ${ARQ_LOG_EXE_EXP}

if [ "${FIM_EXPORT}" = "OK" ]
then
   DISPLAY "..............................: Backup executado com sucesso"
else
   DISPLAY "..............................: Backup executado com erro"
fi

#Complementa arquivo de control .ctl
GERA_CHECKSUM_ARQUIVO_DMP

#Compacta arquivos .dmp
gzip -f ${DIR_DMP}/*.dmp
FIM_COMPACTACAO=OK

#Verifica se a compactacao dos dumps foi efetuada com sucesso
if [ "$?" = "0" ]
then
  FIM_COMPACTACAO=OK
  DISPLAY "..............................: Compactacao executado com sucesso"
else
  FIM_COMPACTACAO=ERRO
  DISPLAY "..............................: Compactacao executado com erro"
fi

if [ "${FIM_EXPORT}" = "OK" ] && [ "${FIM_COMPACTACAO}" = "OK" ]
then
  mv ${DIR_DMP}/${ARQ_LOG} ${DIR_LOG}/${ARQ_LOG}.ok
  echo "--> Finalizou com: Sucesso a Execucao do Backup FULL via DATAPUMP - Data: `date`" >> ${ARQ_LOG_PROCESSO}
  EVENTO "Sucesso na execucao do backup FULL via DATAPUMP" 0
else
   mv ${DIR_DMP}/${ARQ_LOG} ${DIR_LOG}/${ARQ_LOG}.erro
  echo "--> Finalizou com: ERRO a Execucao do Backup FULL via DATAPUMP - Data: `date`" >> ${ARQ_LOG_PROCESSO}
  EVENTO "ERRO na execucao do backup FULL via DATAPUMP" 2 ${ARQ_LOG_GERAL}
fi
DISPLAY "==============================="
DISPLAY "..............................: Fim"
}



#
# CONTROLE DE EXECUCAO
#

INICIO_BACKUP="`date '+%d/%m/%Y %T'`"

if [ `echo $#` -lt "4" ]
then
   echo "Atencao: Falta de Parametros!!!
         sh TkBackupExpdp.sh <INSTANCE> <TIPO DE BACKUP> <RETENCAO DO BACKUP> <BACKUP MONITORADO>
         Opcoes: owner -> Faz backup por owner.
                 full  -> Faz backup full da base.
         Exemplo:sh TkBackupExpdp.sh $ORACLE_SID owner 3 S"
   exit 3
fi

# Recebe parametros

set INSTANCE=`echo $1`
set TIPO=`echo $2 | tr "a-z" "A-Z"`
set RETENCAO_LOG=30
set RETENCAO_DMP=`echo $3`
set BKP_MONITORADO=`echo $4 | tr "a-z" "A-Z"`

#
# Definicao de variaveis do shell
#
case ${INSTANCE} in
        sthds )echo

        set ORACLE_BASE=/oraprd01/app/oracle
        set ORACLE_HOME=/oraprd01/app/oracle/product/11.2.0/db
        set PATH=/oraprd01/app/oracle/product/11.2.0/db/bin:/usr/lib64/qt-3.3/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/home/oracle/bin
        set ORACLE_OWNER=oracle
        set ORACLE_VERSION=11.2
        set ORACLE_SID=${INSTANCE}
        set ORACLE_TERM=xterm
        set THREADS_FLAG=native
        set LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib
        set EDITOR=vi
        set TNS_ADMIN=$ORACLE_HOME/network/admin
                 ;;
      *) # Parametros Nao Definidos
         echo "Parametros nao Definidos para ORACLE_SID=${INSTANCE}"
         exit 4
esac


servername=`uname -n`

if  [ $servername = "bdople001.plena.com.br" ]
then
        set DIR_BASE=/orabackup/sthds/logico
        set DIR_DMP=${DIR_BASE}/files
        set DIR_TMP=${DIR_BASE}/tmp
        set DIR_LOG=${DIR_BASE}/logs
        set ARQ_LOG_PROCESSO=${DIR_TMP}/Export_processo.log
        set TMP_FILE2=${DIR_TMP}/export_full_${INSTANCE}.tmp
        set USER_TABLES=${DIR_TMP}/tk_bkp_exclui_tabela.txt
        set ERRO=${DIR_TMP}/Erro.log
        set SEP_ERRO=${DIR_TMP}/SEP_Erro.log
        set LOG_COMPARA=${DIR_TMP}/ComparaTabela.txt
        set ARQ_LOG_GERAL=${DIR_LOG}/${INSTANCE}.Expdp.Geral.`date +%Y%m%d%H`.log
        set ARQ_OWNER=${DIR_TMP}/Lista_owner_${INSTANCE}.tab
        set SCN_ATUAL=${DIR_TMP}/scn_${INSTANCE}.txt
        set PROC_SUCESS="successfully completed"
        set EMAIL=eventos@teiko.com.br
        set USER_EXPORT=teikobkp
        set USER_EXPORT_PASSWORD=bkpokiet
        set STATUS=OK
        set STATUS_GERAL=OK
        set FAROL_HOME=/usr/local/Teiko/Farol
        set FAROL=$FAROL_HOME/farolevent.sh
        set user_remoto=teiko
        set senha_remoto='$tudo100%'
        set BACKUP_REMOTO=0
        set IDIOMA='$5'
else

  echo " - Nome do servidor invalido : $servername"
        exit 5
fi


DISPLAY "Inicio do Backup .............: Expdp"
DISPLAY "Parametros Recebidos..........:"
DISPLAY "--> Instancia.................: ${INSTANCE}"
DISPLAY "--> Tipo do Backup............: ${TIPO}"
DISPLAY "--> Retencao dos DMPs.........: ${RETENCAO_DMP}"
DISPLAY "--> Retencao dos Logs.........: ${RETENCAO_LOG}"
DISPLAY "--> Backup Monitorado?........: ${BKP_MONITORADO}"
DISPLAY "==============================="



if [ "${TIPO}" = "OWNER" ]
then
   ERROR_COUNT=0
   EXPORT_OWNER
   if [ ${BACKUP_REMOTO} = 1 ]
   then
      REMOTO
   fi
# Define o Backup das linhas
elif [ "${TIPO}" = "FULL" ]
then
   # Define o Backup das linhas
   EXPORT_FULL
      if [ ${BACKUP_REMOTO} = 1 ]
                then
                REMOTO
      fi
else
   DISPLAY "Parametro Invalido..........: TIPO=${TIPO}"
   exit 6;
fi

# Manutencao arquivos

find ${DIR_TMP}/*  -mtime -1 -print -exec rm -f {} \; > /dev/null 2>&1

find ${DIR_LOG}/* -mtime +${RETENCAO_LOG} -print -exec rm -f {} \; > /dev/null 2>&1

find ${DIR_DMP}/*.dmp -mtime +${RETENCAO_DMP} -print -exec rm -f {} \; > /dev/null 2>&1

find ${DIR_DMP}/*.dmp.gz -mtime +${RETENCAO_DMP} -print -exec rm -f {} \; > /dev/null 2>&1

find ${DIR_DMP}/*.ctl -mtime +${RETENCAO_DMP} -print -exec rm -f {} \; > /dev/null 2>&1
